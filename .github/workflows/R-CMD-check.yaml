on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

name: R-CMD-check.yaml

permissions: read-all

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          # note: we use python 3.12 on mac os x so we can install scipy 1.13 from a wheel
          - { os: macos-latest, r: "release", python: "3.12" }
          - { os: windows-latest, r: "release", python: "3.x" }
          - {
              os: ubuntu-latest,
              r: "devel",
              http-user-agent: "release",
              python: "3.x",
            }
          - { os: ubuntu-latest, r: "release", python: "3.x" }
          - { os: ubuntu-latest, r: "oldrel-1", python: "3.9" }

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes
      LAMIN_API_KEY: ${{ secrets.LAMIN_API_KEY_TESTUSER1 }}

    steps:
      - uses: actions/checkout@v4

      - uses: r-lib/actions/setup-pandoc@v2

      - uses: r-lib/actions/setup-tinytex@v2

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.config.python }}

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          use-public-rspm: true

      # manually installing openblas as a workaround for issue
      # https://github.com/laminlabs/laminr/issues/57
      - name: Install OpenBLAS
        if: runner.os == 'macOS'
        run: |
          brew install openblas
          OPENBLAS=$(brew --prefix openblas)
          echo "LDFLAGS=-L$OPENBLAS/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$OPENBLAS/include" >> $GITHUB_ENV

      - name: Install {tiledbsoma}
        if: runner.os == 'Linux'
        run: |
          options(repos = c("https://chanzuckerberg.r-universe.dev", getOption(repos)))
          install.packages("tiledbsoma")
        shell: Rscript {0}

      - name: Install lamindb
        run: |
          pip install lamindb[aws]

      - name: Log in to Lamin
        run: |
          lamin login

      - name: Set cellxgene as default instance
        run: |
          lamin connect laminlabs/cellxgene

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::rcmdcheck
          needs: check

      - uses: r-lib/actions/check-r-package@v2
        with:
          upload-snapshots: true
          build_args: 'c("--no-manual","--compact-vignettes=gs+qpdf")'
