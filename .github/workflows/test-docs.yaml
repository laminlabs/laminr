name: test-docs

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  release:
    types: [published]
  repository_dispatch:
    types: [build]
  workflow_dispatch:


jobs:
  pkgdown:
    runs-on: ubuntu-latest

    # Only restrict concurrency for non-PR jobs
    concurrency:
      group: pkgdown-${{ github.event_name != 'pull_request' || github.run_id }}

    env:
      LAMIN_API_KEY: ${{ secrets.LAMIN_API_KEY_TESTUSER1 }}

    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - uses: r-lib/actions/setup-pandoc@v2

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::pkgdown, local::.
          needs: website
          quarto-version: pre-release

      - name: Install {tiledbsoma} if not already installed
        run: |
          if (!requireNamespace("tiledbsoma", quietly = TRUE)) {
            options(repos = c("https://chanzuckerberg.r-universe.dev", getOption("repos")))
            pak::pkg_install("tiledbsoma")
          } else {
            message("Package 'tiledbsoma' already installed")
          }
        shell: Rscript {0}

      - name: Log in to Lamin
        run: |
          laminr::lamin_login()
        shell: Rscript {0}

      - name: Set lamindata as default instance
        run: |
          laminr::lamin_connect("laminlabs/lamindata")
        shell: Rscript {0}

      - name: Check whether we can import lamindb and connect to the default instance
        run: |
          reticulate::py_config()
          laminr::import_module("lamindb")
        shell: Rscript {0}

      - name: Prepare tests for main docs
        run: |
          laminr::lamin_init(storage = "./test-docs", modules = c("bionty"))
        shell: Rscript {0}

      - name: Run tests for main docs
        run: Rscript test-docs/r-quickstart.R

      - name: Upload docs
        run: |
          pip install laminci@git+https://github.com/laminlabs/laminci
          laminci upload-docs --dir ./test-docs

      - name: Build LaminR docs
        run: pkgdown::build_site_github_pages(new_process = FALSE, install = FALSE)
        shell: Rscript {0}

      - name: Create built site artifact
        uses: actions/upload-artifact@v4
        with:
          name: pkgdown-site
          path: docs

      - name: Deploy to GitHub pages ðŸš€
        if: github.event_name != 'pull_request'
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          clean: false
          branch: gh-pages
          folder: docs

      - uses: cloudflare/wrangler-action@v3
        id: cloudflare
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: 472bdad691b4483dea759eadb37110bd
          command: pages deploy docs --project-name=laminr
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
      - uses: edumserrano/find-create-or-update-comment@v2
        if: github.event_name == 'pull_request'
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-includes: "Deployment URL"
          comment-author: "github-actions[bot]"
          body: |
            Deployment URL: ${{ steps.cloudflare.outputs.deployment-url }}
          edit-mode: replace

      - uses: voxmedia/github-action-slack-notify-build@v1
        if: ${{ success() && github.event_name == 'repository_dispatch' }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_GITHUB_ACTION }}
        with:
          channel_id: C05FDBBFJ1F
          status: SUCCESS
          color: good
      - uses: voxmedia/github-action-slack-notify-build@v1
        if: ${{ failure() && github.event_name == 'repository_dispatch' }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_GITHUB_ACTION }}
        with:
          channel_id: C05FDBBFJ1F
          status: FAILURE
          color: danger
