name: test-unit

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  repository_dispatch:
    types: [build]


jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (r-${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: ubuntu-latest, r: "release"}
          - { os: macos-latest, r: "release"}
          - { os: windows-latest, r: "release"}
          - { os: ubuntu-latest, r: "devel", http-user-agent: "release"}
          - { os: ubuntu-latest, r: "oldrel-1"}

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes
      LAMIN_API_KEY: ${{ secrets.LAMIN_API_KEY_TESTUSER1 }}
      LAMIN_TEST_VERSION: ${{ github.event_name == 'repository_dispatch' && 'release' || 'devel' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pandoc
        uses: r-lib/actions/setup-pandoc@v2

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          use-public-rspm: true

      - name: Install R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::rcmdcheck, local::.
          needs: check

      - name: Log in to Lamin
        run: |
          laminr::lamin_login()
        shell: Rscript {0}

      - name: Set lamindata as default instance
        run: |
          laminr::lamin_connect("laminlabs/lamindata")
        shell: Rscript {0}

      - name: Check whether we can import lamindb and connect to the default instance
        run: |
          laminr::import_module("lamindb")
          message("LAMIN_TEST_VERSION: ", Sys.getenv("LAMIN_TEST_VERSION"))
          laminr::laminr_sitrep()
          reticulate::py_config()
        shell: Rscript {0}

      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check

      - name: Notify Slack dispatch success
        uses: voxmedia/github-action-slack-notify-build@v1
        if: ${{ success() && github.event_name == 'repository_dispatch' }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_GITHUB_ACTION }}
        with:
          channel_id: C05FDBBFJ1F
          status: SUCCESS
          color: good

      - name: Notify Slack dispatch failure
        uses: voxmedia/github-action-slack-notify-build@v1
        if: ${{ failure() && github.event_name == 'repository_dispatch' }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_GITHUB_ACTION }}
        with:
          channel_id: C05FDBBFJ1F
          status: FAILURE
          color: danger
