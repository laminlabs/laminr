name: test-unit

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  repository_dispatch:
    types: [build]


jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (r-${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: ubuntu-latest, r: "release"}
          - { os: macos-latest, r: "release"}
          - { os: windows-latest, r: "release"}
          - { os: ubuntu-latest, r: "devel", http-user-agent: "release"}
          - { os: ubuntu-latest, r: "oldrel-1"}

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes
      LAMIN_API_KEY: ${{ secrets.LAMIN_API_KEY_TESTUSER1 }}
      LAMINR_LAMINDB_VERSION: ${{ github.event_name == 'repository_dispatch' && 'release' || 'devel' }}
      LAMINR_LAMINDB_OPTIONS: 'bionty'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pandoc
        uses: r-lib/actions/setup-pandoc@v2

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          use-public-rspm: true

      - name: Install R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::rcmdcheck, local::.
          needs: check

      - name: Check lamindb requirements
        run: |
          message("LAMINR_LAMINDB_VERSION: ", Sys.getenv("LAMINR_LAMINDB_VERSION"))
          message("LAMINR_LAMINDB_OPTIONS: ", Sys.getenv("LAMINR_LAMINDB_OPTIONS"))
          laminr:::require_lamindb()
          message("--- PYTHON REQUIREMENTS ---")
          reticulate::py_require()
          message("--- PYTHON CONFIG ---")
          reticulate::py_config()
          message("--- PYTHON PACKAGES ---")
          reticulate::py_list_packages()
          message("--- LAMIN PACKAGE VERSIONS ---")
          for (module in c("lamindb", "lamin_cli", "lamin_utils", "lamindb_setup")) {
            verison <- reticulate::py_get_attr(reticulate::import("lamindb"), "__version__")
            message(module, ": ", version)
          }
        shell: Rscript {0}

      - name: Login and set lamindata as default instance
        run: |
          laminr::lamin_login()
          laminr::lamin_connect("laminlabs/lamindata")
          if (laminr::get_current_lamin_instance() != "laminlabs/lamindata") {
            stop("Not connected to lamindata")
          }
        shell: Rscript {0}

      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check

      - name: Notify Slack dispatch success
        uses: voxmedia/github-action-slack-notify-build@v1
        if: ${{ success() && github.event_name == 'repository_dispatch' }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_GITHUB_ACTION }}
        with:
          channel_id: C05FDBBFJ1F
          status: SUCCESS
          color: good

      - name: Notify Slack dispatch failure
        uses: voxmedia/github-action-slack-notify-build@v1
        if: ${{ failure() && github.event_name == 'repository_dispatch' }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_GITHUB_ACTION }}
        with:
          channel_id: C05FDBBFJ1F
          status: FAILURE
          color: danger
