---
title: LaminDB interface in R
format: gfm
---

This package provides an interface to the LaminDB database. It allows you to query the database and download data from it.

## Installation

You can install the development version from GitHub with:

```R
# install.packages("remotes")
remotes::install_github("laminlabs/laminr")
```

## Example

This is a basic example which shows you how to solve a common problem:

```{r}
library(laminr)

ln <- LaminDB$new(
  url = "https://us-west-2.api.lamin.ai",
  instance_id = "399387d4-feec-45b5-995d-5b5750f5542c",
  schema_id = "a122335a-0d85-cf36-291d-9e98a6dd1417"
)
```

Fetch artifact:
```{r}
artifact <- ln$types$core$artifact$get_record(
  id_or_uid = "KBW89Mf7IGcekja2hADu"
)
```

:::{.callout-note}
The data returned by the API contains a field `is_latest`. Since it is not present in the schema, it is current ignored by the package.
:::


```{r}
artifact

artifact$id

artifact$storage_id

artifact$visibility
```

## Issue: Can't fetch records with id, only with uid

Unfortunately, the following code does not work:

```{r eval=FALSE}
artifact$storage()
```

This is because calling `storage()` actually calls `get_record` with the `artifact$storage_id` as argument:

```{r eval=FALSE}
ln$types$core$storage$get_record(
  id_or_uid = artifact$storage_id
)
```

However, it seems `get_record` only works with `uid` and not with `id`. 


<!--
### `fields_metadata` contains entries for other models

...

### `fields_metadata` contains duplicate entries

core.run contains duplicate field 'id'

```r
fields <- 
  ln$.__enclos_env__$private$schemas[["core"]][["run"]] %>%
  .$fields_metadata %>%
  unname() %>%
  dynutils::list_as_tibble() %>%
  filter(model_name == "run") %>%
  filter(!is.na(column))

fields %>% filter(column == "id")
```
-->