% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/api_Module.R
\name{APIModule}
\alias{APIModule}
\title{APIModule}
\description{
A LaminDB module containing one or more registries.
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{name}}{(\code{character(1)})\cr
Get the name of the module.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-APIModule-new}{\code{APIModule$new()}}
\item \href{#method-APIModule-get_registries}{\code{APIModule$get_registries()}}
\item \href{#method-APIModule-get_registry}{\code{APIModule$get_registry()}}
\item \href{#method-APIModule-get_registry_names}{\code{APIModule$get_registry_names()}}
\item \href{#method-APIModule-print}{\code{APIModule$print()}}
\item \href{#method-APIModule-to_string}{\code{APIModule$to_string()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-APIModule-new"></a>}}
\if{latex}{\out{\hypertarget{method-APIModule-new}{}}}
\subsection{Method \code{new()}}{
Creates an instance of this R6 class. This class should not be instantiated directly,
but rather by connecting to a LaminDB instance using the \code{\link[=api_connect]{api_connect()}} function.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{APIModule$new(instance, api, module_name, module_schema)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{instance}}{The instance the module belongs to.}

\item{\code{api}}{The API for the instance.}

\item{\code{module_name}}{The name of the module.}

\item{\code{module_schema}}{The schema of the module.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-APIModule-get_registries"></a>}}
\if{latex}{\out{\hypertarget{method-APIModule-get_registries}{}}}
\subsection{Method \code{get_registries()}}{
Get the registries in the module.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{APIModule$get_registries()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of \link{APIRegistry} objects.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-APIModule-get_registry"></a>}}
\if{latex}{\out{\hypertarget{method-APIModule-get_registry}{}}}
\subsection{Method \code{get_registry()}}{
Get a registry by name.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{APIModule$get_registry(registry_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{registry_name}}{The name of the registry.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A \link{APIRegistry} object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-APIModule-get_registry_names"></a>}}
\if{latex}{\out{\hypertarget{method-APIModule-get_registry_names}{}}}
\subsection{Method \code{get_registry_names()}}{
Get the names of the registries in the module. E.g. \code{c("User", "Artifact")}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{APIModule$get_registry_names()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A character vector of registry names.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-APIModule-print"></a>}}
\if{latex}{\out{\hypertarget{method-APIModule-print}{}}}
\subsection{Method \code{print()}}{
Print a \code{APIModule}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{APIModule$print(style = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{style}}{Logical, whether the output is styled using ANSI codes.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-APIModule-to_string"></a>}}
\if{latex}{\out{\hypertarget{method-APIModule-to_string}{}}}
\subsection{Method \code{to_string()}}{
Create a string representation of a \code{APIModule}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{APIModule$to_string(style = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{style}}{Logical, whether the output is styled using ANSI codes}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A \code{cli::cli_ansi_string} if \code{style = TRUE} or a character vector
}
}
}
