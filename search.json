[{"path":[]},{"path":"https://laminr.lamin.ai/CHANGELOG.html","id":"new-functionality","dir":"","previous_headings":"","what":"NEW FUNCTIONALITY","title":"laminr v0.1.0","text":"Query instance settings Lamin Hub (PR #8). Read user settings env file created lamin Python package (PR #2, PR #8). Add to_string() print() methods Record class (incomplete) describe() method Artifact() class (PR #22).","code":""},{"path":"https://laminr.lamin.ai/CHANGELOG.html","id":"major-changes","dir":"","previous_headings":"","what":"MAJOR CHANGES","title":"laminr v0.1.0","text":"Refactored internal class data structures better modularity extensibility (PR #8). Added GitHub actions project (PR #11): Standard R-CMD-check workflow. Linting action. Commands roxygenizing (/document) restyling source code (/style). Allow unauthenticated users connect instance ran lamin load <instance> beforehand (PR #19).","code":""},{"path":"https://laminr.lamin.ai/CHANGELOG.html","id":"minor-changes","dir":"","previous_headings":"","what":"MINOR CHANGES","title":"laminr v0.1.0","text":"complain foreign keys found record, also complain (PR #13). Define current user current instance lamin-cli prior testing generating documentation CI (PR #23). Add simple unit test queries laminlabs/lamindata (PR #27).","code":""},{"path":"https://laminr.lamin.ai/CHANGELOG.html","id":"documentation","dir":"","previous_headings":"","what":"DOCUMENTATION","title":"laminr v0.1.0","text":"Update README new set instructions simplify (PR #14). Add pkgdown website project (PR #13). simplify README, move detailed usage description separate vignette (PR #13). Generate vignettes using Quarto (PR #13). Add vignette showcase laminr usage (PR #18).","code":""},{"path":"https://laminr.lamin.ai/CHANGELOG.html","id":"bug-fixes","dir":"","previous_headings":"","what":"BUG FIXES","title":"laminr v0.1.0","text":"Fixed parsing env files ~/.lamin due changes lamindb-setup Python package (PR #12).","code":""},{"path":"https://laminr.lamin.ai/CHANGELOG.html","id":"laminr-v001","dir":"","previous_headings":"","what":"laminr v0.0.1","title":"laminr v0.1.0","text":"Initial POC implementation LaminDB API client R. Functionality: Connect LaminDB instance Fetch instance schema Auto-generate classes schema See available modules classes Get record Get record’s related data Cache S3 artifact Load AnnData artifact","code":""},{"path":"https://laminr.lamin.ai/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://laminr.lamin.ai/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://laminr.lamin.ai/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://laminr.lamin.ai/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://laminr.lamin.ai/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://laminr.lamin.ai/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://laminr.lamin.ai/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://laminr.lamin.ai/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://laminr.lamin.ai/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://laminr.lamin.ai/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://laminr.lamin.ai/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://laminr.lamin.ai/articles/structure.html","id":"basic-structure","dir":"Articles","previous_headings":"","what":"Basic structure","title":"Package structure","text":"connecting LaminDB instance, laminr interact LaminDB instance API retrieve schema data structures instance. schema used instantiate Modules containing Registries, turn contain Fields. registry can used retrieve Records.","code":"classDiagram %% # nolint start     laminr --> Instance     laminr --> UserSettings     laminr --> InstanceSettings     Instance --> InstanceAPI     Instance --> Module     Module --> Registry     Registry --> Field     Registry --> Record      class laminr{         +connect(String slug): Instance     }      class UserSettings{         +initialize(...): UserSettings         +email: String         +access_token: String         +uid: String         +uuid: String         +handle: String         +name: String     }      class InstanceSettings{         +initialize(...): InstanceSettings         +owner: String         +name: String         +id: String         +schema_id: String         +api_url: String     }     class Instance{         +initialize(InstanceSettings Instance_settings, API api, Map<String, any> schema): Instance         +get_modules(): Module[]         +get_module(String module_name): Module         +get_module_names(): String[]     }     class InstanceAPI{         +initialize(InstanceSettings Instance_settings)         +get_schema(): Map<String, Any>         +get_record(...): Map<String, Any>     }     class Module{         +initialize(Instance Instance, API api, String module_name, Map<String, any> module_schema): Module         +name: String         +get_registries(): Registry[]         +get_registry(String registry_name): Registry         +get_registry_names(): String[]     }     class Registry{         +initialize(Instance Instance, Module module, API api, String registry_name, Map<String, Any> registry_schema): Registry         +name: String         +class_name: String         +is_link_table: Bool         +get_fields(): Field[]         +get_field(String field_name): Field         +get_field_names(): String[]         +get(String id_or_uid, Bool include_foreign_keys, List~String~ select, Bool verbose): RichRecord         +get_registry_class(): RichRecordClass     }     class Field{         +initialize(...): Field         +type: String         +through: Map         +field_name: String         +registry_name: String         +column_name: String         +module_name: String         +is_link_table: Bool         +relation_type: String         +related_field_name: String         +related_registry_name: String         +related_module_name: String     }     class Record{         +initialize(Instance Instance, Registry registry, API api, Map<String, Any> data): Record         +get_value(String field_name): Any     } %% # nolint end"},{"path":"https://laminr.lamin.ai/articles/structure.html","id":"class-diagram","dir":"Articles","previous_headings":"","what":"Class diagram","title":"Package structure","text":"","code":"classDiagram %% # nolint start     laminr --> Instance     laminr --> UserSettings     laminr --> InstanceSettings     Instance --> InstanceAPI     Instance --> Module     Module --> Registry     Registry --> Field     Registry --> Record      class laminr{         +connect(String slug): Instance     }      class UserSettings{         +initialize(...): UserSettings         +email: String         +access_token: String         +uid: String         +uuid: String         +handle: String         +name: String     }      class InstanceSettings{         +initialize(...): InstanceSettings         +owner: String         +name: String         +id: String         +schema_id: String         +api_url: String     }     class Instance{         +initialize(InstanceSettings Instance_settings, API api, Map<String, any> schema): Instance         +get_modules(): Module[]         +get_module(String module_name): Module         +get_module_names(): String[]     }     class InstanceAPI{         +initialize(InstanceSettings Instance_settings)         +get_schema(): Map<String, Any>         +get_record(...): Map<String, Any>     }     class Module{         +initialize(Instance Instance, API api, String module_name, Map<String, any> module_schema): Module         +name: String         +get_registries(): Registry[]         +get_registry(String registry_name): Registry         +get_registry_names(): String[]     }     class Registry{         +initialize(Instance Instance, Module module, API api, String registry_name, Map<String, Any> registry_schema): Registry         +name: String         +class_name: String         +is_link_table: Bool         +get_fields(): Field[]         +get_field(String field_name): Field         +get_field_names(): String[]         +get(String id_or_uid, Bool include_foreign_keys, List~String~ select, Bool verbose): RichRecord         +get_registry_class(): RichRecordClass     }     class Field{         +initialize(...): Field         +type: String         +through: Map         +field_name: String         +registry_name: String         +column_name: String         +module_name: String         +is_link_table: Bool         +relation_type: String         +related_field_name: String         +related_registry_name: String         +related_module_name: String     }     class Record{         +initialize(Instance Instance, Registry registry, API api, Map<String, Any> data): Record         +get_value(String field_name): Any     } %% # nolint end"},{"path":"https://laminr.lamin.ai/articles/structure.html","id":"sugar-syntax","dir":"Articles","previous_headings":"","what":"Sugar syntax","title":"Package structure","text":"laminr package adds sugar syntax Instance Registry classes. allows directly access instance’s registies record’s fields. instance, instead writing: Using sugar syntax, can write: sugar syntax achieved creating RichInstance RichRecord classes inherit Instance Record, respectively.","code":"db <- connect(\"laminlabs/cellxgene\")  artifact <- db$get_module(\"core\")$get_registry(\"artifact\")$get(\"KBW89Mf7IGcekja2hADu\")  artifact$get_value(\"id\") db <- connect(\"laminlabs/cellxgene\")  artifact <- db$core$artifact$get(\"KBW89Mf7IGcekja2hADu\")  artifact$id classDiagram %% # nolint start     laminr --> RichInstance     laminr --> UserSettings     laminr --> InstanceSettings     RichInstance --|> Instance     Instance --> InstanceAPI     Instance --> Module     Core --|> Module     Bionty --|> Module     Module --> Registry     Registry --> Field     Registry --> RichRecord     Artifact --|> Record     RichInstance --> Core     RichInstance --> Bionty     Core --> Artifact     RichRecord --|> Record      class laminr{         +connect(String slug): RichInstance     }      class UserSettings{         +initialize(...): UserSettings         +email: String         +access_token: String         +uid: String         +uuid: String         +handle: String         +name: String     }      class InstanceSettings{         +initialize(...): InstanceSettings         +owner: String         +name: String         +id: String         +schema_id: String         +api_url: String     }     class Instance{         +initialize(InstanceSettings Instance_settings, API api, Map<String, any> schema): Instance         +get_modules(): Module[]         +get_module(String module_name): Module         +get_module_names(): String[]     }     class InstanceAPI{         +initialize(InstanceSettings Instance_settings)         +get_schema(): Map<String, Any>         +get_record(...): Map<String, Any>     }     class RichInstance{         +initialize(InstanceSettings Instance_settings, API api, Map<String, any> schema): RichInstance         +Registry Artifact         +Registry Collection         +...registry accessors...         +Registry User         +Bionty bionty     }     class Core{         +Registry Artifact         +Registry Collection         +...registry accessors...         +Registry User     }     class Bionty{         +Registry CellLine         +Registry CellMarker         +...registry accessors...         +Registry Tissue     }     class Module{         +initialize(Instance Instance, API api, String module_name, Map<String, any> module_schema): Module         +name: String         +get_registries(): Registry[]         +get_registry(String registry_name): Registry         +get_registry_names(): String[]     }     class Registry{         +initialize(Instance Instance, Module module, API api, String registry_name, Map<String, Any> registry_schema): Registry         +name: String         +class_name: String         +is_link_table: Bool         +get_fields(): Field[]         +get_field(String field_name): Field         +get_field_names(): String[]         +get(String id_or_uid, Bool include_foreign_keys, List~String~ select, Bool verbose): RichRecord         +get_registry_class(): RichRecordClass     }     class Artifact{         +initialize(...): Artifact         +cache(): String         +load(): Any     }     class Field{         +initialize(...): Field         +type: String         +through: Map         +field_name: String         +registry_name: String         +column_name: String         +module_name: String         +is_link_table: Bool         +relation_type: String         +related_field_name: String         +related_registry_name: String         +related_module_name: String     }     class RichRecord{         +...field value accessors...     }     class Record{         +initialize(Instance Instance, Registry registry, API api, Map<String, Any> data): Record         +get_value(String field_name): Any     } %% # nolint end"},{"path":"https://laminr.lamin.ai/articles/structure.html","id":"class-diagram-1","dir":"Articles","previous_headings":"","what":"Class diagram","title":"Package structure","text":"","code":"classDiagram %% # nolint start     laminr --> RichInstance     laminr --> UserSettings     laminr --> InstanceSettings     RichInstance --|> Instance     Instance --> InstanceAPI     Instance --> Module     Core --|> Module     Bionty --|> Module     Module --> Registry     Registry --> Field     Registry --> RichRecord     Artifact --|> Record     RichInstance --> Core     RichInstance --> Bionty     Core --> Artifact     RichRecord --|> Record      class laminr{         +connect(String slug): RichInstance     }      class UserSettings{         +initialize(...): UserSettings         +email: String         +access_token: String         +uid: String         +uuid: String         +handle: String         +name: String     }      class InstanceSettings{         +initialize(...): InstanceSettings         +owner: String         +name: String         +id: String         +schema_id: String         +api_url: String     }     class Instance{         +initialize(InstanceSettings Instance_settings, API api, Map<String, any> schema): Instance         +get_modules(): Module[]         +get_module(String module_name): Module         +get_module_names(): String[]     }     class InstanceAPI{         +initialize(InstanceSettings Instance_settings)         +get_schema(): Map<String, Any>         +get_record(...): Map<String, Any>     }     class RichInstance{         +initialize(InstanceSettings Instance_settings, API api, Map<String, any> schema): RichInstance         +Registry Artifact         +Registry Collection         +...registry accessors...         +Registry User         +Bionty bionty     }     class Core{         +Registry Artifact         +Registry Collection         +...registry accessors...         +Registry User     }     class Bionty{         +Registry CellLine         +Registry CellMarker         +...registry accessors...         +Registry Tissue     }     class Module{         +initialize(Instance Instance, API api, String module_name, Map<String, any> module_schema): Module         +name: String         +get_registries(): Registry[]         +get_registry(String registry_name): Registry         +get_registry_names(): String[]     }     class Registry{         +initialize(Instance Instance, Module module, API api, String registry_name, Map<String, Any> registry_schema): Registry         +name: String         +class_name: String         +is_link_table: Bool         +get_fields(): Field[]         +get_field(String field_name): Field         +get_field_names(): String[]         +get(String id_or_uid, Bool include_foreign_keys, List~String~ select, Bool verbose): RichRecord         +get_registry_class(): RichRecordClass     }     class Artifact{         +initialize(...): Artifact         +cache(): String         +load(): Any     }     class Field{         +initialize(...): Field         +type: String         +through: Map         +field_name: String         +registry_name: String         +column_name: String         +module_name: String         +is_link_table: Bool         +relation_type: String         +related_field_name: String         +related_registry_name: String         +related_module_name: String     }     class RichRecord{         +...field value accessors...     }     class Record{         +initialize(Instance Instance, Registry registry, API api, Map<String, Any> data): Record         +get_value(String field_name): Any     } %% # nolint end"},{"path":"https://laminr.lamin.ai/articles/usage.html","id":"initial-setup","dir":"Articles","previous_headings":"","what":"Initial setup","title":"Usage","text":"part first-time set , need install laminr, Python lamin-cli package, set instance first use.","code":"pip install lamin-cli lamin connect laminlabs/cellxgene install.packages(\"remotes\") remotes::install_github(\"laminlabs/laminr\")"},{"path":"https://laminr.lamin.ai/articles/usage.html","id":"connect-to-a-lamindb-instance","dir":"Articles","previous_headings":"","what":"Connect to a LaminDB instance","title":"Usage","text":"vignette uses laminlabs/cellxgene instance, LaminDB instance interfaces CELLxGENE data. can connect instance using connect R function: printing instance, can see registries available, including Artifact, Collection, Feature, etc. registries corresponding Python class. ‘core’ registries directly available db object, registries modules can accessed via db$<module_name>, e.g.: bionty registries also corresponding Python classes.","code":"library(laminr)  db <- connect(\"laminlabs/cellxgene\") db #> <cellxgene> #>   Inherits from: <Instance> #>   Public: #>     Artifact: active binding #>     bionty: active binding #>     Collection: active binding #>     Feature: active binding #>     FeatureSet: active binding #>     FeatureValue: active binding #>     get_module: function (module_name)  #>     get_module_names: function ()  #>     get_modules: function ()  #>     initialize: function (settings, api, schema)  #>     Param: active binding #>     ParamValue: active binding #>     Run: active binding #>     Storage: active binding #>     Transform: active binding #>     ULabel: active binding #>     User: active binding #>   Private: #>     .api: API, R6 #>     .module_classes: list #>     .settings: InstanceSettings, R6 db$bionty #> <bionty> #>   Inherits from: <Module> #>   Public: #>     CellLine: active binding #>     CellMarker: active binding #>     CellType: active binding #>     DevelopmentalStage: active binding #>     Disease: active binding #>     Ethnicity: active binding #>     ExperimentalFactor: active binding #>     Gene: active binding #>     get_registries: function ()  #>     get_registry: function (registry_name)  #>     get_registry_names: function ()  #>     initialize: function (instance, api, module_name, module_schema)  #>     name: active binding #>     Organism: active binding #>     Pathway: active binding #>     Phenotype: active binding #>     Protein: active binding #>     Source: active binding #>     Tissue: active binding #>   Private: #>     .api: API, R6 #>     .instance: cellxgene, Instance, R6 #>     .module_name: bionty #>     .registry_classes: list"},{"path":"https://laminr.lamin.ai/articles/usage.html","id":"registry","dir":"Articles","previous_headings":"","what":"Registry","title":"Usage","text":"registry used query, store manage data. instance, Artifact registry stores datasets models files, folders, arrays. can see functions can use interact registry printing registry object: instance, can fetch Artifact ID UID. example, Artifact KBW89Mf7IGcekja2hADu AnnData object containing myeloid cells. can view metadata printing object: get detailed information calling $describe() method: can access fields follows: artifact$id: 3659 artifact$uid: KBW89Mf7IGcekja2hADu artifact$key: cell-census/2024-07-01/h5ads/fe52003e-1460-4a65-a213-2bb1a508332f.h5ad fetch data related registries: artifact$root: Storage(uid=‘oIYGbD74’, root=‘s3://cellxgene-data-public’, type=‘s3’, created_at=‘2023-09-19T13:17:56.273068+00:00’, updated_at=‘2023-10-16T15:04:08.998203+00:00’, id=2, created_by_id=1, region=‘us-west-2’) artifact$created_by: User(uid=‘kmvZDIX9’, handle=‘sunnyosun’, name=‘Sunny Sun’, id=1, created_at=‘2023-09-19T12:02:50.765010+00:00’, updated_at=‘2023-12-13T16:23:44.195541+00:00’) Finally, Artifact objects, can directly fetch download data using $cache() $load(), respectively. S3 storage AnnData accessors supported moment. additional storage data accessors desired, please open issue laminr GitHub repository.","code":"db$Artifact #> <Registry> #>   Public: #>     class_name: active binding #>     get: function (id_or_uid, include_foreign_keys = FALSE, verbose = FALSE)  #>     get_field: function (field_name)  #>     get_field_names: function ()  #>     get_fields: function ()  #>     get_record_class: function ()  #>     initialize: function (instance, module, api, registry_name, registry_schema)  #>     is_link_table: active binding #>     module: active binding #>     name: active binding #>   Private: #>     .api: API, R6 #>     .class_name: Artifact #>     .fields: list #>     .instance: cellxgene, Instance, R6 #>     .is_link_table: FALSE #>     .module: core, Module, R6 #>     .record_class: R6ClassGenerator #>     .registry_name: artifact artifact <- db$Artifact$get(\"KBW89Mf7IGcekja2hADu\") artifact #> Artifact(uid='KBW89Mf7IGcekja2hADu', description='Myeloid compartment', key='cell-census/2024-07-01/h5ads/fe52003e-1460-4a65-a213-2bb1a508332f.h5ad', storage_id=2, version='2024-07-01', _accessor='AnnData', id=3659, transform_id=22, size=691757462, is_latest=TRUE, created_by_id=1, type='dataset', _hash_type='md5-n', n_observations=51552, created_at='2024-07-12T12:34:10.345829+00:00', updated_at='2024-07-12T12:40:48.837026+00:00', run_id=27, suffix='.h5ad', visibility=1, _key_is_virtual=FALSE, hash='SZ5tB0T4YKfiUuUkAL09ZA') artifact$describe() #> Artifact(uid='KBW89Mf7IGcekja2hADu', description='Myeloid compartment', key='cell-census/2024-07-01/h5ads/fe52003e-1460-4a65-a213-2bb1a508332f.h5ad', storage_id=2, version='2024-07-01', _accessor='AnnData', id=3659, transform_id=22, size=691757462, is_latest=TRUE, created_by_id=1, type='dataset', _hash_type='md5-n', n_observations=51552, created_at='2024-07-12T12:34:10.345829+00:00', updated_at='2024-07-12T12:40:48.837026+00:00', run_id=27, suffix='.h5ad', visibility=1, _key_is_virtual=FALSE, hash='SZ5tB0T4YKfiUuUkAL09ZA') #>   Provenance #>     $storage = 's3://cellxgene-data-public' #>     $transform = 'Census release 2024-07-01 (LTS)' #>     $run = '2024-07-16T12:49:41.81955+00:00' #>     $created_by = 'sunnyosun' artifact$cache() artifact$load() #> ℹ s3://cellxgene-data-public/cell-census/2024-07-01/h5ads/fe52003e-1460-4a65-a213-2bb1a508332f.h5ad already exists at /home/runner/.cache/lamindb/cellxgene-data-public/cell-census/2024-07-01/h5ads/fe52003e-1460-4a65-a213-2bb1a508332f.h5ad #> AnnData object with n_obs × n_vars = 51552 × 36398 #>     obs: 'donor_id', 'Predicted_labels_CellTypist', 'Majority_voting_CellTypist', 'Manually_curated_celltype', 'assay_ontology_term_id', 'cell_type_ontology_term_id', 'development_stage_ontology_term_id', 'disease_ontology_term_id', 'self_reported_ethnicity_ontology_term_id', 'is_primary_data', 'organism_ontology_term_id', 'sex_ontology_term_id', 'tissue_ontology_term_id', 'suspension_type', 'tissue_type', 'cell_type', 'assay', 'disease', 'organism', 'sex', 'tissue', 'self_reported_ethnicity', 'development_stage', 'observation_joinid' #>     var: 'gene_symbols', 'feature_is_filtered', 'feature_name', 'feature_reference', 'feature_biotype', 'feature_length' #>     uns: 'cell_type_ontology_term_id_colors', 'citation', 'default_embedding', 'schema_reference', 'schema_version', 'sex_ontology_term_id_colors', 'title' #>     obsm: 'X_umap'"},{"path":"https://laminr.lamin.ai/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Robrecht Cannoodt. Author, maintainer. Lamin Labs. Author.","code":""},{"path":"https://laminr.lamin.ai/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cannoodt R, Lamin Labs (2024). laminr: LaminDB interface R. R package version 0.1.0.9001, https://github.com/laminlabs/laminr, https://laminr.lamin.ai.","code":"@Manual{,   title = {laminr: LaminDB interface in R},   author = {Robrecht Cannoodt and {Lamin Labs}},   year = {2024},   note = {R package version 0.1.0.9001, https://github.com/laminlabs/laminr},   url = {https://laminr.lamin.ai}, }"},{"path":"https://laminr.lamin.ai/index.html","id":"laminr-work-with-lamindb-instances-in-r","dir":"","previous_headings":"","what":"LaminDB interface in R","title":"LaminDB interface in R","text":"package allows query download data LaminDB instances.","code":""},{"path":"https://laminr.lamin.ai/index.html","id":"setup","dir":"","previous_headings":"","what":"Setup","title":"LaminDB interface in R","text":"Install development version GitHub: Install Lamin CLI authenticate: [!TIP] can get token LaminDB web interface.","code":"# install.packages(\"remotes\") remotes::install_github(\"laminlabs/laminr\") pip install lamin-cli lamin login"},{"path":"https://laminr.lamin.ai/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"LaminDB interface in R","text":"Let’s first connect LaminDB instance: Get artifact: Access fields: Fetch related fields: Load artifact:","code":"library(laminr)  db <- connect(\"laminlabs/cellxgene\") artifact <- db$Artifact$get(\"KBW89Mf7IGcekja2hADu\") artifact Artifact(uid='KBW89Mf7IGcekja2hADu', description='Myeloid compartment', key='cell-census/2024-07-01/h5ads/fe52003e-1460-4a65-a213-2bb1a508332f.h5ad', version='2024-07-01', _accessor='AnnData', id=3659, transform_id=22, size=691757462, is_latest=TRUE, created_by_id=1, _hash_type='md5-n', type='dataset', created_at='2024-07-12T12:34:10.345829+00:00', n_observations=51552, updated_at='2024-07-12T12:40:48.837026+00:00', run_id=27, suffix='.h5ad', visibility=1, _key_is_virtual=FALSE, hash='SZ5tB0T4YKfiUuUkAL09ZA', storage_id=2) artifact$id [1] 3659 artifact$uid [1] \"KBW89Mf7IGcekja2hADu\" artifact$key [1] \"cell-census/2024-07-01/h5ads/fe52003e-1460-4a65-a213-2bb1a508332f.h5ad\" artifact$storage$root [1] \"s3://cellxgene-data-public\" artifact$created_by$handle [1] \"sunnyosun\" artifact$load() ℹ 's3://cellxgene-data-public/cell-census/2024-07-01/h5ads/fe52003e-1460-4a65-a213-2bb1a508332f.h5ad' already exists at '/home/rcannood/.cache/lamindb/cellxgene-data-public/cell-census/2024-07-01/h5ads/fe52003e-1460-4a65-a213-2bb1a508332f.h5ad'  AnnData object with n_obs × n_vars = 51552 × 36398     obs: 'donor_id', 'Predicted_labels_CellTypist', 'Majority_voting_CellTypist', 'Manually_curated_celltype', 'assay_ontology_term_id', 'cell_type_ontology_term_id', 'development_stage_ontology_term_id', 'disease_ontology_term_id', 'self_reported_ethnicity_ontology_term_id', 'is_primary_data', 'organism_ontology_term_id', 'sex_ontology_term_id', 'tissue_ontology_term_id', 'suspension_type', 'tissue_type', 'cell_type', 'assay', 'disease', 'organism', 'sex', 'tissue', 'self_reported_ethnicity', 'development_stage', 'observation_joinid'     var: 'gene_symbols', 'feature_is_filtered', 'feature_name', 'feature_reference', 'feature_biotype', 'feature_length'     uns: 'cell_type_ontology_term_id_colors', 'citation', 'default_embedding', 'schema_reference', 'schema_version', 'sex_ontology_term_id_colors', 'title'     obsm: 'X_umap'"},{"path":"https://laminr.lamin.ai/reference/connect.html","id":null,"dir":"Reference","previous_headings":"","what":"Connect to instance — connect","title":"Connect to instance — connect","text":"Note prior connecting instance, need authenticate lamin login. slug provided, default instance loaded, set running lamin load <slug>.","code":""},{"path":"https://laminr.lamin.ai/reference/connect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect to instance — connect","text":"","code":"connect(slug = NULL)"},{"path":"https://laminr.lamin.ai/reference/connect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connect to instance — connect","text":"slug instance slug account_handle/instance_name URL. instance owned , suffices pass instance name. slug provided, default instance loaded.","code":""},{"path":"https://laminr.lamin.ai/reference/connect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Connect to instance — connect","text":"","code":"if (FALSE) { # \\dontrun{ # first run 'lamin login' to authenticate instance <- connect(\"laminlabs/cellxgene\") instance } # }"},{"path":"https://laminr.lamin.ai/reference/laminr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"laminr: LaminDB interface in R — laminr-package","title":"laminr: LaminDB interface in R — laminr-package","text":"laminr package provides interface LaminDB database. allows query database download data .","code":""},{"path":[]},{"path":"https://laminr.lamin.ai/reference/laminr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"laminr: LaminDB interface in R — laminr-package","text":"Maintainer: Robrecht Cannoodt rcannood@gmail.com (ORCID) Authors: Lamin Labs open-source@lamin.ai","code":""}]
